<!DOCTYPE html>
<html>
	<head>
	    <script src="https://gojs.net/latest/release/go.js"></script>
		%include head.tmpl
	</head>
	<body onload="diagram();showrun();showtopo()">
	    <script>
		    var intervalID1 = window.setInterval(showrun, 5000);
		    var intervalID2 = window.setInterval(showtopo, 20000);
		    var lastSchedule =0;
		    var myTopo;
		    var myDiagram;

            function showrun() {
                $.ajax({
                    dataType: "json",
                    url: "/schedule/showrun",
                    success: schedule,
                    error: errorOnAjax
                });
                $.ajax({
                    dataType: "json",
                    url: "/schedule/showstartup",
                    success: startupschedule,
                    error: errorOnAjax
                });
                console.log("updating schedule info");
            }
            function showtopo(){
                $.ajax({
                    dataType: "json",
                    url: "/bier/gettopo",
                    success: generateTopo,
                    error: errorOnAjax
                });
                console.log("updating topology info");
            }
		</script>

		<div id="wrapper">
			%include navbar.tmpl ovVersion=ovVersion, roverMode=roverMode, ctrlMode=ctrlMode

			<div id="page-wrapper">
	            <div class="row">
	                <div class="col-lg-12">
	                    <h1 class="page-header">Controller</h1>
	                </div>
	            </div>


	            <div class="row">
		            <div class="col-lg-12" align="right">
		                % if not sim_mode:
		                    <button id="resetall_btn" type="button" class="btn btn-default btn-xs">Reset ALL Motes</button>
		                % end
		            </div>

		            <script>
		                $( "#myip_select" ).change(function(){
		                    myip =  $(this).val();

		                    console.log('Update for myip selection: ' + myip);
		                    // Store to allow automatically selecting this rover.
		                    setCookie("selected_myip", myip);

		                    // Don't allow to reselect null option.
		                    //$("#myip_select option[value='none']").remove();
		                });

		                $( "#resetall_btn" )
			                    .button()
			                    .click(function( event ) {
			                        console.log('reseting all motes');
			                        $.ajax({
			                            dataType: "json",
			                            url: "/reset/" + "all",
			                            success: showrun,
			                            error: errorOnAjax
			                        });
			                    });
		            </script>

		        </div>

                <br>

	            <div class="row">
	                <div class="col-lg-12">
	                    <div class = "row">
	                        <div class = "col-lg-6">
                                <input id="bitmap_manual" type="text" placeholder="insert bierbitmap here">
                                <button id="bitmap_btn" type="button" class="btn btn-default btn-xs">Change bitmap</button>&nbsp;&nbsp;
                                <input type="checkbox" id="bierbool" \
                                    % if enable_bier:
                                        checked="checked" \
                                    % end
                                /> Enable BIER
                                &nbsp;&nbsp;
                                <input type="checkbox" id="autobierbool" \
                                    % if auto_bier:
                                        checked="checked" \
                                    % end
                                /> Enable ARC
                                <br><br>
                                <input type="file" id="upload_schedule" style="display: inline-block">
                                <button type="button" id="btn_upload" class="btn btn-default btn-xs" style="display: inline-block">Upload</button>
                                <button id="resetschedule_btn" type="button" class="btn btn-default btn-xs" style="display: inline-block">Reset Schedule</button>
                                <br><br>
                                <button id="installschedule_btn" type="button" class="btn btn-default btn-xs">Install Schedule</button>
                                <button id="clearbierslots_btn" type="button" class="btn btn-default btn-xs">Clear BIER Slots</button>
                                <button id="clearsharedslots_btn" type="button" class="btn btn-default btn-xs">Clear SHARED Slots</button>
                                <button id="clearallslots_btn" type="button" class="btn btn-default btn-xs">Clear ALL Slots</button>
                            </div>
                            <div class = "col-lg-6" id="bierdiv" \
                                % if not auto_bier:
                                    style = "display: none" \
                                % end
                            >
                                <div style="display: inline-block; float: left">
                                    Path:
                                    <select class="rel_value_fld" id="reptype_select" size="1">
                                        <option value="singlepath" \
                                            % if path_type==0:
                                                selected="selected" \
                                            % end
                                        >Single</option>
                                        <option value="fullpath" \
                                            % if path_type==1:
                                                selected="selected" \
                                            % end
                                        >Full</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <hr>
                        <div class="panel panel-default">
	                        <div class="panel-heading">
	                            Information
	                        </div>
	                        <div class="panel-body">
	                            <ul class="nav nav-tabs">
	                            	<li class="active"><a href="#pathview" data-toggle="tab">Distances and Paths</a>
	                                </li>
	                                <li><a href="#startupSchedule" data-toggle="tab">Startup Schedule</a>
	                                </li>
	                                <li><a href="#runningSchedule" data-toggle="tab">Running Schedule</a>
	                                </li>
	                            </ul>
	                            <div class="tab-content">
	                                <div class="tab-pane fade in active" id="pathview">
	                                    <br><br>
	                                    <b>Topology:</b>
	                                    <div id="myTopoDiv" style="border: solid 1px black; background: white; width: 100%; height: 700px"></div>
	                                    <br><br>
	                                    <b>Track:</b>
                                        <div id="myDiagramDiv" style="border: solid 1px black; background: white; width: 100%; height: 700px"></div>
                                        <br><p>
                                        Click on a node to show distances from that node to each other node.
                                        Click on a second node to show a shortest path from the first node to the second node.
                                        (Note that there might not be any path between the nodes.)
                                        </p><p>
                                        Clicking on a third node will de-select the first two.
                                        </p><p>
                                        Here is a list of all paths between the first and second selected nodes.
                                        Select a path to highlight it in the diagram.
                                        </p>
                                        <select id="myPaths" style="width:100%" size="10"></select>
                                    </div>
	                                <div class="tab-pane fade" id="startupSchedule">
	                                    <br><br>
                                        <div class = "row">
                                            <div class="col-lg-6">
                                                <b >Startup Schedule:</b>
                                            </div>
                                            <div class="col-lg-6">
                                                <div style="display: inline-block; float: left">
                                                    <b style="display: inline-block">DAGroot:</b> <p style="display: inline-block" id = "starroottxt"></p>
                                                </div>
                                                <div style="display: inline-block; float: right">
                                                    <b style="display: inline-block">FrameLength:</b> <p style="display: inline-block" id = "startupframelength"></p>
                                                </div>
                                            </div>
                                        </div>
                                        <div id="tab-star-sched" class="table-responsive"></div>
                                    </div>
	                                <div class="tab-pane fade" id="runningSchedule">
	                                    <br><br>
                                        <div class = "row">
                                            <div class="col-lg-6">
                                                <b >Running Schedule:</b>
                                            </div>
                                            <div class="col-lg-6">
                                                <div style="display: inline-block; float: left">
                                                    <b style="display: inline-block">DAGroot:</b> <p style="display: inline-block" id = "runnroottxt"></p>
                                                </div>
                                                <div style="display: inline-block; float: right">
                                                    <b style="display: inline-block">FirstFreeSlot:</b> <p style="display: inline-block" id = "firstfreeslot"></p>
                                                </div>
                                            </div>
                                        </div>
                                        <div id="tab-runn-sched" class="table-responsive"></div>
                                    </div>
                                </div>

                                <script>
                                    $("#reptype_select").change(function() {
                                        reptype =  $(this).val()
                                        $.ajax({
                                            dataType: "json",
                                            url: "/bier/" + reptype,
                                            error: errorOnAjax
                                        });
                                        console.log('Update for reptype selection: ' + reptype);
                                    });

                                    $( "#bitmap_btn" )
                                        .button()
                                        .click(function( event ) {
                                            newbitmap = $("#bitmap_manual").val();
                                            if (newbitmap != ''){
                                                $.ajax({
                                                    dataType: "json",
                                                    url: "/setbitmap/"+newbitmap,
                                                    error: errorOnAjax
                                                });
                                                console.log('Changed bitmap to : ' + newbitmap);
                                            }
                                    });

                                    $("#bierbool").on('change',function(){
                                         if($(this).is(':checked')){
                                            console.log('Enabling BIER');
                                            $.ajax({
                                                dataType: "json",
                                                url: "/bier/on",
                                                error: errorOnAjax
                                            });
                                         } else{
                                            console.log('Disabling BIER');
                                            $.ajax({
                                                dataType: "json",
                                                url: "/bier/off",
                                                error: errorOnAjax
                                            });
                                         }
                                    });

                                    $("#autobierbool").on('change',function(){
                                         if($(this).is(':checked')){
                                            console.log('Enabling Automation');
                                            $.ajax({
                                                dataType: "json",
                                                url: "/bier/autoon",
                                                error: errorOnAjax
                                            });
                                            document.getElementById("bierdiv").style.display = "block";
                                         } else{
                                            console.log('Disabling Automation');
                                            $.ajax({
                                                dataType: "json",
                                                url: "/bier/autooff",
                                                error: errorOnAjax
                                            });
                                            document.getElementById("bierdiv").style.display = "none";
                                         }
                                    });

                                    $( "#installschedule_btn" )
                                        .button()
                                        .click(function( event ) {
                                            $.ajax({
                                                dataType: "json",
                                                url: "/schedule/"+"install",
                                                success: schedule,
                                                error: errorOnAjax
                                            });
                                            console.log('Installed new schedule');
                                    });

                                    $( "#clearbierslots_btn" )
                                        .button()
                                        .click(function( event ) {
                                            $.ajax({
                                                dataType: "json",
                                                url: "/schedule/"+"clearbier",
                                                success: schedule,
                                                error: errorOnAjax
                                            });
                                            console.log('Cleared schedule');
                                    });

                                    $( "#clearsharedslots_btn" )
                                        .button()
                                        .click(function( event ) {
                                            $.ajax({
                                                dataType: "json",
                                                url: "/schedule/"+"clearshared",
                                                success: schedule,
                                                error: errorOnAjax
                                            });
                                            console.log('Cleared schedule');
                                    });

                                    $( "#clearallslots_btn" )
                                        .button()
                                        .click(function( event ) {
                                            $.ajax({
                                                dataType: "json",
                                                url: "/schedule/"+"clearall",
                                                success: schedule,
                                                error: errorOnAjax
                                            });
                                            console.log('Cleared schedule');
                                    });

                                    $( "#resetschedule_btn" )
                                        .button()
                                        .click(function( event ) {
                                            $.ajax({
                                                dataType: "json",
                                                url: "/schedule/"+"default",
                                                success: startupschedule,
                                                error: errorOnAjax
                                            });
                                            console.log('Cleared schedule');
                                    });

                                    $( "#btn_upload" )
                                    .button()
                                    .click(function( evt ) {
                                        var files = document.getElementById('upload_schedule').files;
                                        if (!files.length) {
                                          alert('Please select a file!');
                                          return;
                                        }
                                        var file = files[0];
                                        var reader = new FileReader();
                                        reader.onloadend = function(evt) {
                                            if (evt.target.readyState == FileReader.DONE) {
                                                var scheduleData = evt.target.result;
                                                $.ajax({
                                                    type: "POST",
                                                    url: "/controller/upload",
                                                    data: {'schedule' : scheduleData},
                                                    dataType: "json",
                                                    success: startupschedule,
                                                    error: errorOnAjax
                                                });
                                                console.log('Overwritten startupSchedule');
                                            }
                                        };
                                        var scheduleFile = file.slice(0, file.size);
                                        reader.readAsText(scheduleFile);
                                    });

                                    function schedule(json) {
                                        var colors = ["Blue","Red","Brown","Green","Orange","BurlyWood","Chocolate","ForestGreen","Gold","HotPink","LawnGreen","Lime","LimeGreen","MidnightBlue","MistyRose","Olive",
                                        "OrangeRed","PaleGreen","PaleVioletRed","PeachPuff","Pink","PowderBlue","Purple","SaddleBrown","SandyBrown","SeaGreen","SkyBlue","SpringGreen","Tomato","Yellow"];

                                        if(json.hasOwnProperty('rootList')){
                                            rootList  = json.rootList;
                                            document.getElementById('runnroottxt').innerHTML = rootList;
                                        }

                                        if(json.hasOwnProperty('slotFrames')){
                                            frameJson = json.slotFrames['1'];

                                            if (frameJson){
                                                frameLength = frameJson.frameLength;
                                            } else {
                                                frameLength = 15;
                                            }
                                            firstfreeslot = frameJson.firstfreeslot;
                                            document.getElementById('firstfreeslot').innerHTML = firstfreeslot + ' / ' + frameLength;

                                            if(firstfreeslot != lastSchedule){
                                                $.ajax({
                                                    dataType: "json",
                                                    url: "/bier/gettrack",
                                                    success: generateGraph,
                                                    error: errorOnAjax
                                                });
                                                lastSchedule = firstfreeslot;
                                                console.log('updating track info');
                                            }

                                            tableNum = frameLength/15;
                                            var tbl_body = "";

                                            for(k = 0; k < tableNum; k++){

                                                tbl_body += "<table class=\"table table-striped table-bordered table-hover\" id=\"dataTables-example\"><thead><tr><th></th>";
                                                for (i = k*15; i < (k+1)*15; i++) {
                                                    tbl_body += "<th>" + i + "</th>";
                                                }
                                                tbl_body += "</tr></thead><tbody>";

                                                for(i = 0; i<16; i++){
                                                    var tbl_row = "<td>" + i + "</td>";
                                                    for(j=k*15; j < (k+1)*15; j++){
                                                        tbl_row += "<td>";
                                                        if (frameJson) {
                                                        $.each(frameJson.cells, function() {
                                                            if(this['channelOffset']==i && this['slotOffset']==j) {
                                                                if(this['shared']){
                                                                    tbl_row += 'SHARED';
                                                                } else if (this['type'] == '4 (SERIALRX)'){
                                                                    tbl_row += 'SERIAL';
                                                                } else if (this['type'] == '3 (TXRX)'){
                                                                    tbl_row += '<t style=\"color:' + colors[this['trackID']] + '\">TXRX</t>';
                                                                } else {
                                                                    tbl_row += '<t style=\"color:' + colors[this['trackID']] + '\">' + this['txMoteID'] + "-"+ this['bitIndex'] +">" + this['rxMoteList'] + '</t>';
                                                                }
                                                            }
                                                        });
                                                        }
                                                        tbl_row += "</td>";
                                                    }
                                                    tbl_body += "<tr class=\"odd gradeX\">" + tbl_row + "</tr>";
                                                }
                                                tbl_body += "</tbody></table>";
                                            }
                                            //console.log(tbl_body);
                                        } else {
                                            tbl_body = "";
                                        }
                                        $("#tab-runn-sched").html(tbl_body).text();
                                    }

                                    function startupschedule(json) {
                                        if(json.hasOwnProperty('rootList')){
                                            rootList  = json.rootList;
                                            document.getElementById('starroottxt').innerHTML = rootList;
                                        }

                                        if(json.hasOwnProperty('slotFrames')){
                                            frameJson = json.slotFrames['1'];
                                            if (frameJson){
                                                frameLength = frameJson.frameLength;
                                                document.getElementById('startupframelength').innerHTML = frameLength;
                                            } else {
                                                frameLength = 15;
                                            }

                                            tableNum = frameLength/15;
                                            var tbl_body = "";

                                            for(k = 0; k< tableNum; k++){

                                                tbl_body += "<table class=\"table table-striped table-bordered table-hover\" id=\"dataTables-example\"><thead><tr><th></th>";
                                                for (i = k*15; i < (k+1)*15; i++) {
                                                    tbl_body += "<th>" + i + "</th>";
                                                }
                                                tbl_body += "</tr></thead><tbody>";

                                                for(i = 0; i<16; i++){
                                                    var tbl_row = "<td>" + i + "</td>";
                                                    for(j=k*15; j < (k+1)*15; j++){
                                                        tbl_row += "<td>";
                                                        if (frameJson) {
                                                        $.each(frameJson.cells, function() {
                                                            if(this['channelOffset']==i && this['slotOffset']==j) {
                                                                if(this['shared']){
                                                                    tbl_row += 'SHARED';
                                                                }else if (this['type'] == '3 (TXRX)'){
                                                                    tbl_row += 'TXRX';
                                                                } else {
                                                                    tbl_row += this['txMoteID'] + "-"+ this['bitIndex'] +">" + this['rxMoteList'];
                                                                }
                                                            }
                                                        });
                                                        }
                                                        tbl_row += "</td>";
                                                    }
                                                    tbl_body += "<tr class=\"odd gradeX\">" + tbl_row + "</tr>";
                                                }
                                                tbl_body += "</tbody></table>";
                                            }
                                            //console.log(tbl_body);
                                        } else {
                                            tbl_body = "";
                                        }
                                        $("#tab-star-sched").html(tbl_body).text();
                                    }

                                    function logresult(json) {
                                        $.each(json, function(i, option) {
                                            console.log(i+': ' + option);
                                        });
                                    }

                                    function errorOnAjax(jqxhr, status, errorstr) {
                                        var errText = (errorstr == null)
                                                ? '' : ', error: ' + errorstr;
                                        console.log('Ajax error: ' + status + errText);
                                    }
                                </script>

                                <script>
                                    function diagram() {

                                        var $ = go.GraphObject.make;  // for conciseness in defining templates

                                        myTopo =
                                          $(go.Diagram, "myTopoDiv", // must be the ID or reference to div
                                            {
                                              initialAutoScale: go.Diagram.UniformToFill,
                                              padding: 10,
                                              contentAlignment: go.Spot.Center,
                                              layout: $(go.LayeredDigraphLayout),
                                              maxSelectionCount: 2,
                                              "animationManager.isEnabled": false
                                            });


                                        // define the Node template
                                        myTopo.nodeTemplate =
                                          $(go.Node, "Horizontal",
                                            { locationSpot: go.Spot.Center,  // Node.location is the center of the Shape
                                              locationObjectName: "SHAPE",
                                              selectionAdorned: false,
                                              selectionChanged: nodeSelectionChanged },
                                            $(go.Panel, "Auto",
                                              $(go.Shape, "Ellipse",
                                                { name: "SHAPE",
                                                  fill: "lightgray",  // default value, but also data-bound
                                                  stroke: "transparent",  // modified by highlighting
                                                  strokeWidth: 2,
                                                  desiredSize: new go.Size(45, 45),
                                                  portId: "" },  // so links will go to the shape, not the whole node
                                                new go.Binding("fill", "isSelected", function(s, obj) { return s ? "red" : obj.part.data.color; }).ofObject()),
                                              $(go.TextBlock,
                                                new go.Binding("text"))));

                                        // define the Link template
                                        myTopo.linkTemplate =
                                          $(go.Link,
                                            {
                                              selectable: false,      // links cannot be selected by the user
                                              curve: go.Link.Bezier,
                                              layerName: "Background"  // don't cross in front of any nodes
                                            },
                                            $(go.Shape,  // this shape only shows when it isHighlighted
                                              { isPanelMain: true, stroke: null, strokeWidth: 5 },
                                              new go.Binding("stroke", "isHighlighted", function(h) { return h ? "red" : null; }).ofObject()),
                                            $(go.Shape,
                                              // mark each Shape to get the link geometry with isPanelMain: true
                                              { isPanelMain: true, stroke: "black", strokeWidth: 2 },
                                              new go.Binding("stroke", "color")),
                                            $(go.TextBlock, new go.Binding("text", "text"))
                                          );

                                        myDiagram =
                                          $(go.Diagram, "myDiagramDiv", // must be the ID or reference to div
                                            {
                                              initialAutoScale: go.Diagram.UniformToFill,
                                              padding: 10,
                                              contentAlignment: go.Spot.Center,
                                              layout: $(go.ForceDirectedLayout, { defaultSpringLength: 10}),
                                              maxSelectionCount: 2,
                                              "animationManager.isEnabled": false
                                            });


                                        // define the Node template
                                        myDiagram.nodeTemplate =
                                          $(go.Node, "Horizontal",
                                            { locationSpot: go.Spot.Center,  // Node.location is the center of the Shape
                                              locationObjectName: "SHAPE",
                                              selectionAdorned: false,
                                              selectionChanged: nodeSelectionChanged },
                                            $(go.Panel, "Auto",
                                              $(go.Shape, "Ellipse",
                                                { name: "SHAPE",
                                                  fill: "lightgray",  // default value, but also data-bound
                                                  stroke: "transparent",  // modified by highlighting
                                                  strokeWidth: 2,
                                                  desiredSize: new go.Size(30, 30),
                                                  portId: "" },  // so links will go to the shape, not the whole node
                                                new go.Binding("fill", "isSelected", function(s, obj) { return s ? "red" : obj.part.data.color; }).ofObject()),
                                              $(go.TextBlock,
                                                new go.Binding("text", "distance", function(d) { if (d === Infinity) return "INF"; else return d | 0; }))),
                                            $(go.TextBlock,
                                              new go.Binding("text")));

                                        // define the Link template
                                        myDiagram.linkTemplate =
                                          $(go.Link,
                                            {
                                              selectable: false,      // links cannot be selected by the user
                                              curve: go.Link.Bezier,
                                              layerName: "Background"  // don't cross in front of any nodes
                                            },
                                            $(go.Shape,  // this shape only shows when it isHighlighted
                                              { isPanelMain: true, stroke: null, strokeWidth: 5 },
                                              new go.Binding("stroke", "isHighlighted", function(h) { return h ? "red" : null; }).ofObject()),
                                            $(go.Shape,
                                              // mark each Shape to get the link geometry with isPanelMain: true
                                              { isPanelMain: true, stroke: "black", strokeWidth: 1 },
                                              new go.Binding("stroke", "color")),
                                            $(go.Shape, { toArrow: "Standard" }),
                                            $(go.TextBlock, new go.Binding("text", "text"))
                                          );

                                        // Override the clickSelectingTool's standardMouseSelect
                                        // If less than 2 nodes are selected, always add to the selection
                                        myDiagram.toolManager.clickSelectingTool.standardMouseSelect = function() {
                                          var diagram = this.diagram;
                                          if (diagram === null || !diagram.allowSelect) return;
                                          var e = diagram.lastInput;
                                          var count = diagram.selection.count;
                                          var curobj = diagram.findPartAt(e.documentPoint, false);
                                          if (curobj !== null) {
                                            if (count < 2) {  // add the part to the selection
                                              if (!curobj.isSelected) {
                                                var part = curobj;
                                                if (part !== null) part.isSelected = true;
                                              }
                                            } else {
                                              if (!curobj.isSelected) {
                                                var part = curobj;
                                                if (part !== null) diagram.select(part);
                                              }
                                            }
                                          } else if (e.left && !(e.control || e.meta) && !e.shift) {
                                            // left click on background with no modifier: clear selection
                                            diagram.clearSelection();
                                          }
                                        }

                                        // select two nodes that connect from the first one to the second one
                                        var num = myDiagram.model.nodeDataArray.length;
                                        var node1 = null;
                                        var node2 = null;
                                        for (var i = 0; i < num; i++) {
                                          node1 = myDiagram.findNodeForKey(i);
                                          var distances = findDistances(node1);
                                          for (var j = 0; j < num; j++) {
                                            node2 = myDiagram.findNodeForKey(j);
                                            var dist = distances.getValue(node2);
                                            if (dist > 1 && dist < Infinity) {
                                              node1.isSelected = true;
                                              node2.isSelected = true;
                                              break;
                                            }
                                          }
                                          if (myDiagram.selection.count > 0) break;
                                        }
                                    }

                                    function generateTopo(json) {
                                        var colors = ["gainsboro","gainsboro","lightgray","silver","dimgray"];

                                        var names = json.nodes;

                                        var nodeDataArray = [];
                                        for (var i = 0; i < names.length; i++) {
                                          nodeDataArray.push({ key: names[i], text: names[i], color: colors[0] });
                                        }

                                        var links = json.links;
                                        var linkDataArray = [];
                                        for (var i = 0; i < links.length; i++) {
                                          linkDataArray.push({ from: links[i][0], to: links[i][1], text: links[i][2], color: colors[links[i][2]-1] });
                                        }

                                        myTopo.model = new go.GraphLinksModel(nodeDataArray, linkDataArray);
                                    }

                                    function generateGraph(json) {
                                        var colors = ["Blue","Brown","BurlyWood","Chocolate","ForestGreen","Gold","Green","HotPink","LawnGreen","Lime","LimeGreen","MidnightBlue","MistyRose","Olive",
                                        "Orange","OrangeRed","PaleGreen","PaleVioletRed","PeachPuff","Pink","PowderBlue","Purple","Red","SaddleBrown","SandyBrown","SeaGreen","SkyBlue","SpringGreen","Tomato","Yellow"];

                                        var names = json.nodes;

                                        var nodeDataArray = [];
                                        for (var i = 0; i < names.length; i++) {
                                          nodeDataArray.push({ key: names[i], text: names[i], color: colors[i % colors.length] });
                                        }

                                        var links = json.links;
                                        var linkDataArray = [];
                                        for (var i = 0; i < links.length; i++) {
                                          linkDataArray.push({ from: links[i][0], to: links[i][1], text: links[i][2], color: colors[i % colors.length] });
                                        }

                                        myDiagram.model = new go.GraphLinksModel(nodeDataArray, linkDataArray);
                                    }


                                    // There are three bits of functionality here:
                                    // 1: findDistances(Node) computes the distance of each Node from the given Node.
                                    //    This function is used by showDistances to update the model data.
                                    // 2: findShortestPath(Node, Node) finds a shortest path from one Node to another.
                                    //    This uses findDistances.  This is used by highlightShortestPath.
                                    // 3: collectAllPaths(Node, Node) produces a collection of all paths from one Node to another.
                                    //    This is used by listAllPaths.  The result is remembered in a global variable
                                    //    which is used by highlightSelectedPath.  This does not depend on findDistances.

                                    // Returns a Map of Nodes with distance values from the given source Node.
                                    // Assumes all links are unidirectional.
                                    function findDistances(source) {
                                        var diagram = source.diagram;
                                        // keep track of distances from the source node
                                        var distances = new go.Map(go.Node, "number");
                                        // all nodes start with distance Infinity
                                        var nit = diagram.nodes;
                                        while (nit.next()) {
                                          var n = nit.value;
                                          distances.add(n, Infinity);
                                        }
                                        // the source node starts with distance 0
                                        distances.add(source, 0);
                                        // keep track of nodes for which we have set a non-Infinity distance,
                                        // but which we have not yet finished examining
                                        var seen = new go.Set(go.Node);
                                        seen.add(source);

                                        // keep track of nodes we have finished examining;
                                        // this avoids unnecessary traversals and helps keep the SEEN collection small
                                        var finished = new go.Set(go.Node);
                                        while (seen.count > 0) {
                                          // look at the unfinished node with the shortest distance so far
                                          var least = leastNode(seen, distances);
                                          var leastdist = distances.getValue(least);
                                          // by the end of this loop we will have finished examining this LEAST node
                                          seen.remove(least);
                                          finished.add(least);
                                          // look at all Links connected with this node
                                          var it = least.findLinksOutOf();
                                          while (it.next()) {
                                            var link = it.value;
                                            var neighbor = link.getOtherNode(least);
                                            // skip nodes that we have finished
                                            if (finished.contains(neighbor)) continue;
                                            var neighbordist = distances.getValue(neighbor);
                                            // assume "distance" along a link is unitary, but could be any non-negative number.
                                            var dist = leastdist + 1;  //Math.sqrt(least.location.distanceSquaredPoint(neighbor.location));
                                            if (dist < neighbordist) {
                                              // if haven't seen that node before, add it to the SEEN collection
                                              if (neighbordist === Infinity) {
                                                seen.add(neighbor);
                                              }
                                              // record the new best distance so far to that node
                                              distances.add(neighbor, dist);
                                            }
                                          }
                                        }

                                        return distances;
                                    }

                                    // This helper function finds a Node in the given collection that has the smallest distance.
                                    function leastNode(coll, distances) {
                                        var bestdist = Infinity;
                                        var bestnode = null;
                                        var it = coll.iterator;
                                        while (it.next()) {
                                          var n = it.value;
                                          var dist = distances.getValue(n);
                                          if (dist < bestdist) {
                                            bestdist = dist;
                                            bestnode = n;
                                          }
                                        }
                                        return bestnode;
                                    }


                                    // Find a path that is shortest from the BEGIN node to the END node.
                                    // (There might be more than one, and there might be none.)
                                    function findShortestPath(begin, end) {
                                        // compute and remember the distance of each node from the BEGIN node
                                        distances = findDistances(begin);

                                        // now find a path from END to BEGIN, always choosing the adjacent Node with the lowest distance
                                        var path = new go.List();
                                        path.add(end);
                                        while (end !== null) {
                                          var next = leastNode(end.findNodesInto(), distances);
                                          if (next !== null) {
                                            if (distances.getValue(next) < distances.getValue(end)) {
                                              path.add(next);  // making progress towards the beginning
                                            } else {
                                              next = null;  // nothing better found -- stop looking
                                            }
                                          }
                                          end = next;
                                        }
                                        // reverse the list to start at the node closest to BEGIN that is on the path to END
                                        // NOTE: if there's no path from BEGIN to END, the first node won't be BEGIN!
                                        path.reverse();
                                        return path;
                                    }


                                    // Recursively walk the graph starting from the BEGIN node;
                                    // when reaching the END node remember the list of nodes along the current path.
                                    // Finally return the collection of paths, which may be empty.
                                    // This assumes all links are unidirectional.
                                    function collectAllPaths(begin, end) {
                                        var stack = new go.List(go.Node);
                                        var coll = new go.List(go.List);

                                        function find(source, end) {
                                          source.findNodesOutOf().each(function(n) {
                                            if (n === source) return;  // ignore reflexive links
                                            if (n === end) {  // success
                                              var path = stack.copy();
                                              path.add(end);  // finish the path at the end node
                                              coll.add(path);  // remember the whole path
                                            } else if (!stack.contains(n)) {  // inefficient way to check having visited
                                              stack.add(n);  // remember that we've been here for this path (but not forever)
                                              find(n, end);
                                              stack.removeAt(stack.count - 1);
                                            }  // else might be a cycle
                                          });
                                        }

                                        stack.add(begin);  // start the path at the begin node
                                        find(begin, end);
                                        return coll;
                                    }

                                    // Return a string representation of a path for humans to read.
                                    function pathToString(path) {
                                        var s = path.length + ": ";
                                        for (var i = 0; i < path.length; i++) {
                                          if (i > 0) s += " -- ";
                                          s += path.elt(i).data.text;
                                        }
                                        return s;
                                    }


                                    // When a node is selected show distances from the first selected node.
                                    // When a second node is selected, highlight the shortest path between two selected nodes.
                                    // If a node is deselected, clear all highlights.
                                    function nodeSelectionChanged(node) {
                                        var diagram = node.diagram;
                                        if (diagram === null) return;
                                        diagram.clearHighlighteds();
                                        if (node.isSelected) {
                                          // when there is a selection made, always clear out the list of all paths
                                          var sel = document.getElementById("myPaths");
                                          sel.innerHTML = "";

                                          // show the distance for each node from the selected node
                                          var begin = diagram.selection.first();
                                          showDistances(begin);

                                          if (diagram.selection.count === 2) {
                                            var end = node;  // just became selected

                                            // highlight the shortest path
                                            highlightShortestPath(begin, end);

                                            // list all paths
                                            listAllPaths(begin, end);
                                          }
                                        }
                                    }


                                    // Have each node show how far it is from the BEGIN node.
                                    function showDistances(begin) {
                                        // compute and remember the distance of each node from the BEGIN node
                                        distances = findDistances(begin);

                                        // show the distance on each node
                                        var it = distances.iterator;
                                        while (it.next()) {
                                          var n = it.key;
                                          var dist = it.value;
                                          myDiagram.model.setDataProperty(n.data, "distance", dist);
                                        }
                                    }


                                    // Highlight links along one of the shortest paths between the BEGIN and the END nodes.
                                    // Assume links are unidirectional.
                                    function highlightShortestPath(begin, end) {
                                        highlightPath(findShortestPath(begin, end));
                                    }


                                    // List all paths from BEGIN to END
                                    function listAllPaths(begin, end) {
                                        // compute and remember all paths from BEGIN to END: Lists of Nodes
                                        paths = collectAllPaths(begin, end);

                                        // update the Selection element with a bunch of Option elements, one per path
                                        var sel = document.getElementById("myPaths");
                                        sel.innerHTML = "";  // clear out any old Option elements
                                        paths.each(function(p) {
                                          var opt = document.createElement("option");
                                          opt.text = pathToString(p);
                                          sel.add(opt, null);
                                        });
                                        sel.onchange = highlightSelectedPath;
                                    }

                                    // A collection of all of the paths between a pair of nodes, a List of Lists of Nodes
                                    var paths = null;
                                    // This is only used for listing all paths for the selection onchange event.

                                    // When the selected item changes in the Selection element,
                                    // highlight the corresponding path of nodes.
                                    function highlightSelectedPath() {
                                        var sel = document.getElementById("myPaths");
                                        var idx = sel.selectedIndex;
                                        var opt = sel.options[idx];
                                        var val = opt.value;
                                        highlightPath(paths.elt(sel.selectedIndex));
                                        }

                                        // Highlight a particular path, a List of Nodes.
                                        function highlightPath(path) {
                                        myDiagram.clearHighlighteds();
                                        for (var i = 0; i < path.count - 1; i++) {
                                          var f = path.elt(i);
                                          var t = path.elt(i + 1);
                                          f.findLinksTo(t).each(function(l) { l.isHighlighted = true; });
                                        }
                                    }
                                </script>
                            </div>
                        </div>
                	</div>
                </div>
	        </div>
	    </div>
	</body>
</html>